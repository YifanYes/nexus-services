generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    url      = env("DATABASE_URL")
}

enum Role {
    ROOT
    TASK_MASTER
    USER
}

enum Class {
    ASSASSIN
    WARRIOR
    MAGE
    BARD
}

model Character {
    id                   BigInt   @id @default(autoincrement())
    isActive             Boolean  @default(true)
    isAlive              Boolean  @default(true)
    username             String   @unique
    email                String   @unique
    password             String
    profilePhoto         String?
    role                 Role     @default(USER)
    class                Class?
    hp                   Int?
    maxHp                Int?
    experience           Int?
    level                Int?
    stress               Float?
    maximumMissionNumber Int?
    currentMissionNumber Int?
    resistance           Float?
    performance          Float?
    trust                Float?
    weekendDays          Int?     @default(2)
    daysOffWork          Int?     @default(0)
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt

    parties  CharactersOnParties[]
    missions MissionsOnCharacters[]
}

model Party {
    id        BigInt   @id @default(autoincrement())
    isActive  Boolean  @default(true)
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    characters CharactersOnParties[]
}

// Intermediate table to crate many-to-many relationship between characters and parties
model CharactersOnParties {
    character   Character @relation(fields: [characterId], references: [id])
    characterId BigInt
    party       Party     @relation(fields: [partyId], references: [id])
    partyId     BigInt
    assignedAt  DateTime  @default(now())

    @@id([characterId, partyId])
}

model Board {
    id          BigInt   @id @default(autoincrement())
    name        String
    description String?
    isActive    Boolean  @default(true)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    columns Column[]
}

model Column {
    id        BigInt   @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    board    Board     @relation(fields: [boardId], references: [id])
    boardId  BigInt
    missions Mission[]
}

model Mission {
    id             BigInt    @id @default(autoincrement())
    isCompleted    Boolean   @default(false)
    title          String
    description    String?
    difficulty     Int
    requirements   String[]
    sinergy        Int
    stress         Float
    estimatedTime  Float
    completionTime Float?
    deadline       DateTime?
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt

    characters MissionsOnCharacters[]
    column     Column                 @relation(fields: [columnId], references: [id])
    columnId   BigInt
}

// Intermediate table to crate many-to-many relationship between characters and missions
model MissionsOnCharacters {
    character   Character @relation(fields: [characterId], references: [id])
    characterId BigInt
    mission     Mission   @relation(fields: [missionId], references: [id])
    missionId   BigInt

    @@id([characterId, missionId])
}
